/**************************************************
 * EE312 Lab 3
 *
 * Copyright 2015 University of Strathclyde
 *
 *
 **************************************************/
#include <msp430.h>
#include <driverlib.h>
#include "LedDriver.h"

int SW1_interruptFlag_=1;
int SW2_interruptFlag_;
int rate=1;

#pragma vector = PORT1_VECTOR
__interrupt void P1_ISR(void)
{
   switch(__even_in_range(P1IV,P1IV_P1IFG7)) 
{
     case P1IV_P1IFG3: //It is SW1
      	SW1_interruptFlag_ = -SW1_interruptFlag_;
    	GPIO_clearInterrupt(GPIO_PORT_P1, GPIO_PIN3);
      break;
      
      case P1IV_P1IFG4:  //It is SW2
    	SW2_interruptFlag_ = 1;
    	GPIO_clearInterrupt(GPIO_PORT_P1, GPIO_PIN4);
      break;
} 
}
///*
//*/
//#define PWMprd 		80  	         //3.1kHz
//#define PWMduty 	5    		//duty period =75% 
// void PWM_setUp()
//{
//   P1DIR |= BIT7 +BIT5 +BIT6;  //set pin as output 
//   P1SEL0 |= BIT7+BIT6;        //P1.7 TA0.1, P1.6 TA0.2, Timer TA0 CCR1 capture: CCI1A input, compare: Out1 outputs PWM1
//   P8DIR |= BIT3 +BIT2;        //P8.3 P8.2 as output
//   P2DIR |= BIT5 +BIT7;
//
//   TA0CTL=TASSEL_1+MC_1;//ACLK (approximately 32 kHz), up-mode                     
//   TA0CTL|=ID_0;        //00b = /1, 01b = /2, 10b = /4, 11b = /8
//   TA0CCTL1= OUTMOD_3;  //  TA0.1   set (TACCR1) / reset (TACCR0)
//   TA0CCTL2= OUTMOD_3;  //  TA0.2
//   TA0CCR0= PWMprd;     //PWM period
//   TA0CCR1= PWMduty;    //Period *(1-Duty Cycle)
//   TA0CCR2= PWMduty;  
//
//   TA0CTL |= TACLR;    //Timer_A clear The TACLR bit is automatically reset and always reads as zero
//   TA0CTL |= TAIE;     //Timer_A interrupt enable.
//   TA0CCTL0 |= CCIE;   //Capture/compare interrupt enable. This bit enables the interrupt request of the corresponding CCIFG flag.
//   TA0CCTL1 |= CCIE;  
//       
//   GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN3); 
//   GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN2);  
// 
//   GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN5); 
//   GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN5); 
//   
//}

int main(void)
{
  //Default MCLK = 1MHz
  
  unsigned int i = 0;
  int rate=1;
 
  unsigned char dialValue = 0x01;
  
  WDTCTL = WDTPW | WDTHOLD;               // Stop watchdog timer
 // PWM_setUp();
  initialiseLedDial();
  
  // Disable the GPIO power-on default high-impedance mode
  // to activate previously configured port settings
  PMM_unlockLPM5();
  
  //Switch 1 2
   GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN3|GPIO_PIN4);
   GPIO_selectInterruptEdge(GPIO_PORT_P1, GPIO_PIN3|GPIO_PIN4, GPIO_LOW_TO_HIGH_TRANSITION);
   GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN3|GPIO_PIN4);  

   GPIO_clearInterrupt(GPIO_PORT_P1, GPIO_PIN3|GPIO_PIN4);
   GPIO_enableInterrupt(GPIO_PORT_P1, GPIO_PIN3|GPIO_PIN4);
   
  __enable_interrupt();
  
  while(1)
  {
   
    
    if (SW1_interruptFlag_==1)
    {
      dialValue = dialValue * 0x02;
      
      if(0x00 == dialValue)
         dialValue = 0x01;
    }
      
    
    //if(SW1_interruptFlag_==-1)
    else
    {
      dialValue = dialValue / 0x02;
      
      if(0x00 == dialValue)
         dialValue = 0x80;
    }
      
    if (SW2_interruptFlag_)
    { rate=rate+1;
    
      if (rate==4)
      {rate=1;}
      SW2_interruptFlag_ = 0;
    }
    
    //Set value
    setLedDial(dialValue);
    
    //Refresh display (10 times for each position)
    for(i = 0; i < 10*rate; i++)      //100ms
      refreshLedDial();

    
    
  }
}

  
